package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"poster/graph/model"
	"strconv"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, newPost model.NewPostInput) (*string, error) {
	id, err := r.DB.CreatePost(ctx, newPost)
	if err != nil {
		return nil, err
	}

	idStr := strconv.Itoa(id)
	return &idStr, nil
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, post model.UpdPostInput) (*string, error) {
	id, err := r.DB.UpdatePost(ctx, post)
	if err != nil {
		return nil, err
	}

	idStr := strconv.Itoa(id)
	return &idStr, nil
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (*string, error) {
	idInt, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	idInt, err = r.DB.DeletePost(ctx, idInt)
	if err != nil {
		return nil, err
	}

	idStr := strconv.Itoa(idInt)
	return &idStr, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, newComment model.NewCommentInput) (*string, error) {
	id, err := r.DB.CreateComment(ctx, newComment)
	if err != nil {
		return nil, err
	}

	idStr := strconv.Itoa(id)
	return &idStr, nil
}

// UpdateComment is the resolver for the updateComment field.
func (r *mutationResolver) UpdateComment(ctx context.Context, comment model.UpdCommentInput) (*string, error) {
	id, err := r.DB.UpdateComment(ctx, comment)
	if err != nil {
		return nil, err
	}

	idStr := strconv.Itoa(id)
	return &idStr, nil
}

// DeleteComment is the resolver for the deleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, id string) (*string, error) {
	idInt, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	idInt, err = r.DB.DeleteComment(ctx, idInt)
	if err != nil {
		return nil, err
	}

	idStr := strconv.Itoa(idInt)
	return &idStr, nil
}

// AddPostLike is the resolver for the addPostLike field.
func (r *mutationResolver) AddPostLike(ctx context.Context, likes model.NewPostLikeInput) (*string, error) {
	authorID, err := strconv.Atoi(likes.AuthorID)
	if err != nil {
		return nil, err
	}

	postID, err := strconv.Atoi(likes.PostID)
	if err != nil {
		return nil, err
	}

	err = r.DB.UpdPostLikes(ctx, authorID, postID, likes.Like)

	return nil, err
}

// AddCommentLike is the resolver for the addCommentLike field.
func (r *mutationResolver) AddCommentLike(ctx context.Context, likes model.NewCommentLikeInput) (*string, error) {
	authorID, err := strconv.Atoi(likes.AuthorID)
	if err != nil {
		return nil, err
	}

	commentID, err := strconv.Atoi(likes.CommentID)
	if err != nil {
		return nil, err
	}

	err = r.DB.UpdCommentLikes(ctx, authorID, commentID, likes.Like)

	return nil, err
}

// GetPostLikes is the resolver for the getPostLikes field.
func (r *mutationResolver) GetPostLikes(ctx context.Context, post string) (*model.Rating, error) {
	postID, err := strconv.Atoi(post)
	if err != nil {
		return nil, err
	}

	var rating model.Rating
	rating.Likes, rating.Dislikes, err = r.DB.GetPostLikes(ctx, postID)
	if err != nil {
		return nil, err
	}

	return &rating, nil
}

// GetCommentLikes is the resolver for the getCommentLikes field.
func (r *mutationResolver) GetCommentLikes(ctx context.Context, comment string) (*model.Rating, error) {
	commentID, err := strconv.Atoi(comment)
	if err != nil {
		return nil, err
	}

	var rating model.Rating
	rating.Likes, rating.Dislikes, err = r.DB.GetCommentLikes(ctx, commentID)
	if err != nil {
		return nil, err
	}

	return &rating, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, userID int) ([]*model.Post, error) {
	posts, err := r.DB.GetPosts(ctx, userID)
	if err != nil {
		return nil, err
	}

	return posts, nil
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context, postID int, commentID *int, page *int, perPage *int) ([]*model.Comment, error) {
	var commentIDInt, pageInt, perPageInt int
	if commentID == nil {
		commentIDInt = 0
	} else {
		commentIDInt = *commentID
	}

	if page == nil {
		pageInt = 0
	} else {
		pageInt = *page
	}

	if perPage == nil {
		perPageInt = 10
	} else {
		perPageInt = *perPage
	}
	comments, err := r.DB.GetComments(ctx, postID, commentIDInt, pageInt, perPageInt)
	if err != nil {
		return nil, err
	}

	return comments, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
